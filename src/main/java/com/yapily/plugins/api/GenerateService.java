package com.yapily.plugins.api;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Map;

import org.apache.maven.execution.MavenSession;
import org.apache.maven.plugin.BuildPluginManager;
import org.apache.maven.plugin.MojoExecutionException;
import org.apache.maven.project.MavenProject;
import org.codehaus.plexus.util.xml.Xpp3Dom;
import org.codehaus.plexus.util.xml.Xpp3DomBuilder;
import org.codehaus.plexus.util.xml.pull.XmlPullParserException;
import org.eclipse.jgit.annotations.Nullable;
import org.eclipse.jgit.lib.RepositoryBuilder;

import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import static org.twdata.maven.mojoexecutor.MojoExecutor.element;
import static org.twdata.maven.mojoexecutor.MojoExecutor.executeMojo;
import static org.twdata.maven.mojoexecutor.MojoExecutor.executionEnvironment;
import static org.twdata.maven.mojoexecutor.MojoExecutor.goal;
import static org.twdata.maven.mojoexecutor.MojoExecutor.plugin;

@Slf4j
@AllArgsConstructor
public class GenerateService {
    public static final String GITIGNORE_ENTRIES_SUFFIX = "### END OF AUTO-GENERATION yapily-api-maven-plugin";


    private final YapilyApi api;
    private final String repositorySpecPath;
    @Nullable
    private final String localSpecPath;
    private final String gitUrlTemplate;
    private final String gitBranchTemplate;
    private final boolean autoGitignore;
    private final String openapiGeneratorVersion;
    private final Map<?, ?> openapiConfigurationOverrides;
    private final MavenProject project;
    private final MavenSession mavenSession;
    private final BuildPluginManager pluginManager;
    private final String configResourcePath;


    public static GenerateService of(String apiName, String apiVersion, String repositorySpecPath, String localSpecPath, String gitUrlTemplate,
                                     String gitBranchTemplate, boolean autoGitignore, String openapiGeneratorVersion, Map<?, ?> openapiConfigurationOverrides, MavenProject project,
                                     MavenSession mavenSession, BuildPluginManager pluginManager, String configResourcePath) {
        return new GenerateService(
                new YapilyApi(apiName, apiVersion),
                repositorySpecPath,
                localSpecPath,
                gitUrlTemplate,
                gitBranchTemplate,
                autoGitignore,
                openapiGeneratorVersion,
                openapiConfigurationOverrides,
                project,
                mavenSession,
                pluginManager,
                configResourcePath
        );
    }

    public Path generate() throws MojoExecutionException {
        var localMode = localSpecPath != null;

        if (!localMode) {
            fetchApi();
        }

        // configure open api generator configuration
        String specPath = localMode ? localSpecPath : Utils.getSpec(api, project, repositorySpecPath).toString();
        var configuration = configuration(specPath, configResourcePath);

        log.debug("Generating stubbing using configuration: {}", configuration);
        try {
            executeMojo(
                    plugin("org.openapitools", "openapi-generator-maven-plugin", openapiGeneratorVersion),
                    goal("generate"),
                    configuration,
                    executionEnvironment(project, mavenSession, pluginManager)
            );
        } catch (MojoExecutionException e) {
            log.error("Failed to generate server stubbing", e);
            throw e;
        }

        var compileSourceRoot = Utils.getCompileSourceRoot(project);
        log.debug("Adding compile source root: {}", compileSourceRoot);
        project.addCompileSourceRoot(compileSourceRoot.toString());


        if (autoGitignore) {
            try {
                autoGitIgnoreArtifacts();
            } catch (IOException e) {
                log.debug("Failed to automatically ignore fetched specs", e);
            }
        }
        return compileSourceRoot;
    }

    private void autoGitIgnoreArtifacts() throws IOException {
        var nearestGitDir = new RepositoryBuilder()
                .findGitDir(project.getBasedir())
                .getGitDir();

        if (nearestGitDir != null) {
            var gitRepo = nearestGitDir.getParentFile().toPath();
            var gitIgnorePath = gitRepo.resolve(".gitignore");

            if (Files.exists(gitIgnorePath)) {
                var versionedGitignoreEntriesPrefix = "### AUTO-GENERATED BY yapily-api-maven-plugin " + getClass().getPackage().getImplementationVersion();

                var specParentIgnoreEntry = gitRepo
                        .relativize(Utils.getSpecParent(project))
                        .toString()
                        .replace("\\", "/");
                var openapitoolsPath = project.getBasedir().toPath().resolve("openapitools.json");
                var openapitoolsIgnoreEntry = gitRepo
                        .relativize(openapitoolsPath)
                        .toString()
                        .replace("\\", "/");


                try (var br = new BufferedReader(new FileReader(gitIgnorePath.toFile()))) {
                    String line;
                    while ((line = br.readLine()) != null) {
                        if (line.startsWith(versionedGitignoreEntriesPrefix)) return;
                    }
                }
                log.info("Appending generated yapily-api specifications folder to .gitignore of repository: {}", gitRepo);
                try (var os = new BufferedWriter(new FileWriter(gitIgnorePath.toFile(), true))) {
                    os.newLine();
                    os.write(versionedGitignoreEntriesPrefix);
                    os.newLine();
                    os.write(specParentIgnoreEntry);
                    os.newLine();
                    os.write(openapitoolsIgnoreEntry);
                    os.newLine();
                    os.write(GITIGNORE_ENTRIES_SUFFIX);
                }
            }
        }
    }

    private Xpp3Dom configuration(String specPath, String configResourcePath) throws MojoExecutionException {
        Xpp3Dom openapiMavenPluginConfiguration = readConfig(configResourcePath);
        var outputDirectory = Utils.getGeneratedSources(project);
        openapiMavenPluginConfiguration.addChild(element("output", outputDirectory.toString()).toDom());
        var configOptions = openapiMavenPluginConfiguration.getChild("configOptions");
        if (configOptions == null) throw new MojoExecutionException("Invalid openapi-generator configuration. configOptions missing");
        configOptions.addChild(element("sourceFolder", Utils.RELATIVE_GENERATED_SOURCE_FOLDER.toString()).toDom());

        //        if (openapiConfigurationOverrides != null) {
        //            log.info("Merging user-defined openapi-generator configuration");
        //            log.debug("\t config {}", openapiConfigurationOverrides);
        //
        //            openapiMavenPluginConfiguration = Xpp3Dom.mergeXpp3Dom(
        //                    openapiMavenPluginConfiguration,
        //                    Utils.buildElement((Map<String, Object>) openapiConfigurationOverrides, "configuration").toDom()
        //            );
        //        }

        // add the inputSpec (-i) path (from the yapily-api local-repo)
        openapiMavenPluginConfiguration.addChild(element("inputSpec", specPath).toDom());

        return openapiMavenPluginConfiguration;
    }

    private Xpp3Dom readConfig(String s) throws MojoExecutionException {
        Xpp3Dom openapiMavenPluginConfiguration;
        try (var is = getClass().getResourceAsStream(s)) {
            if (is == null) {
                throw new IOException("Failed to obtain embedded openapi-generator configuration");
            }
            openapiMavenPluginConfiguration = Xpp3DomBuilder.build(is, StandardCharsets.UTF_8.toString());
        } catch (XmlPullParserException | IOException e) {
            log.error("Failed to parse embedded openapi-generator configuration", e);
            throw new MojoExecutionException("Failed to parse embedded openapi-generator configuration", e);
        }
        return openapiMavenPluginConfiguration;
    }

    private void fetchApi() throws MojoExecutionException {
        log.info("Checking cache for {}", api);

        if (Utils.isGitRepository(Utils.getApiRepositoryPath(api, project))) {
            log.info("\t{} already cached", api);
        } else {
            Utils.fetchApi(api, project, gitUrlTemplate, gitBranchTemplate);
        }
    }
}
