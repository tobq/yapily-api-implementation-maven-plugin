# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    env:
      # https://github.com/sonatype-nexus-community/nexus-repo-github-action/issues/2
      ARTIFACT_ID: yapily-api-implementation-maven-plugin
      ARTIFACT_GROUP_ID: com.yapily
      ARTIFACT_VERSION: 1.0.7

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: actions/checkout@master
      - name: Set up JDK 11
        uses: actions/setup-java@master
        with:
          java-version: 11
      - name: Build with Maven
        run: mvn package --file pom.xml
      - name: LOG TARGET 
        run: ls ./target
      - name: Publish to Nexus Repository
        # You may pin to the exact commit or the version.
        # uses: sonatype-nexus-community/nexus-repo-github-action@f8178e57b79477b7b98b1ae94a4d77ba9c1bf731
        uses: sonatype-nexus-community/nexus-repo-github-action@master
        with:
          # Nexus Repository Server URL
          serverUrl: ${{ secrets.NEXUS_SERVER_URL }}
          # Username to connect to Nexus Repo to publish components
          username: ${{ secrets.NEXUS_SERVER_USERNAME }}
          # Password to connect to Nexus Repo to publish components
          password: ${{ secrets.NEXUS_SERVER_PASSWORD }}
          # Component format e.g. maven2
          format: maven2
          # Name of target repository on Nexus Repo e.g. maven-releases
          repository: maven-releases
          # Component coordinates in key=value format. e.g. groupId=com.example artifactId=app version=1.0.0
          coordinates:  groupId=${{env.ARTIFACT_GROUP_ID}} artifactId=${{env.ARTIFACT_ID}} version=${{env.ARTIFACT_VERSION}} 
          # Component assets in key=value format. e.g. extension=jar
          assets: extension=jar
          # File to publish
          filename: ./target/${{env.ARTIFACT_ID}}-${{env.ARTIFACT_VERSION}}.jar
